type token =
  | NAT of (string)
  | INT of (string)
  | FLOAT of (string)
  | STRING of (string)
  | VAR of (string)
  | VALUE_TYPE of (Wasm_types.value_type)
  | ANYFUNC
  | MUT
  | LPAR
  | RPAR
  | NOP
  | DROP
  | BLOCK
  | END
  | IF
  | THEN
  | ELSE
  | SELECT
  | LOOP
  | BR
  | BR_IF
  | BR_TABLE
  | CALL
  | CALL_INDIRECT
  | RETURN
  | GET_LOCAL
  | SET_LOCAL
  | TEE_LOCAL
  | GET_GLOBAL
  | SET_GLOBAL
  | LOAD of (int option -> Memory.offset -> Ast.instr')
  | STORE of (int option -> Memory.offset -> Ast.instr')
  | OFFSET_EQ_NAT of (string)
  | ALIGN_EQ_NAT of (string)
  | CONST of (string Source.phrase -> Ast.instr' * Values.value)
  | UNARY of (Ast.instr')
  | BINARY of (Ast.instr')
  | TEST of (Ast.instr')
  | COMPARE of (Ast.instr')
  | CONVERT of (Ast.instr')
  | UNREACHABLE
  | CURRENT_MEMORY
  | GROW_MEMORY
  | FUNC
  | START
  | TYPE
  | PARAM
  | RESULT
  | LOCAL
  | GLOBAL
  | TABLE
  | ELEM
  | MEMORY
  | DATA
  | OFFSET
  | IMPORT
  | EXPORT
  | MODULE
  | BIN
  | QUOTE
  | SCRIPT
  | REGISTER
  | INVOKE
  | GET
  | ASSERT_MALFORMED
  | ASSERT_INVALID
  | ASSERT_SOFT_INVALID
  | ASSERT_UNLINKABLE
  | ASSERT_RETURN
  | ASSERT_RETURN_CANONICAL_NAN
  | ASSERT_RETURN_ARITHMETIC_NAN
  | ASSERT_TRAP
  | ASSERT_EXHAUSTION
  | INPUT
  | OUTPUT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "wasm/text/parser.mly"
open Source
open Wasm_types
open Ast
open Operators
open Script


(* Error handling *)

let error at msg = raise (Script.Syntax (at, msg))

let parse_error msg =
  error Source.no_region
    (if msg = "syntax error" then "unexpected token" else msg)


(* Position handling *)

let position_to_pos position =
  { file = position.Lexing.pos_fname;
    line = position.Lexing.pos_lnum;
    column = position.Lexing.pos_cnum - position.Lexing.pos_bol
  }

let positions_to_region position1 position2 =
  { left = position_to_pos position1;
    right = position_to_pos position2
  }

let at () =
  positions_to_region (Parsing.symbol_start_pos ()) (Parsing.symbol_end_pos ())
let ati i =
  positions_to_region (Parsing.rhs_start_pos i) (Parsing.rhs_end_pos i)


(* Literals *)

let literal f s =
  try f s with Failure _ -> error s.at "constant out of range"

let nat s at =
  try
    let n = int_of_string s in
    if n >= 0 then n else raise (Failure "")
  with Failure _ -> error at "integer constant out of range"

let nat32 s at =
  try I32.of_string_u s with Failure _ -> error at "i32 constant out of range"

let name s at =
  try Utf8.decode s with Utf8.Utf8 -> error at "invalid UTF-8 encoding"


(* Symbolic variables *)

module VarMap = Map.Make(String)

type space = {mutable map : int32 VarMap.t; mutable count : int32}
let empty () = {map = VarMap.empty; count = 0l}

type types = {space : space; mutable list : type_ list}
let empty_types () = {space = empty (); list = []}

type context =
  { types : types; tables : space; memories : space;
    funcs : space; locals : space; globals : space; labels : int32 VarMap.t }

let empty_context () =
  { types = empty_types (); tables = empty (); memories = empty ();
    funcs = empty (); locals = empty (); globals = empty ();
    labels = VarMap.empty }

let enter_func (c : context) =
  {c with labels = VarMap.empty; locals = empty ()}

let lookup category space x =
  try VarMap.find x.it space.map
  with Not_found -> error x.at ("unknown " ^ category ^ " " ^ x.it)

let type_ (c : context) x = lookup "type" c.types.space x
let func (c : context) x = lookup "function" c.funcs x
let local (c : context) x = lookup "local" c.locals x
let global (c : context) x = lookup "global" c.globals x
let table (c : context) x = lookup "table" c.tables x
let memory (c : context) x = lookup "memory" c.memories x
let label (c : context) x =
  try VarMap.find x.it c.labels
  with Not_found -> error x.at ("unknown label " ^ x.it)

let func_type (c : context) x =
  try (Lib.List32.nth c.types.list x.it).it
  with Failure _ -> error x.at ("unknown type " ^ Int32.to_string x.it)


let bind category space x =
  if VarMap.mem x.it space.map then
    error x.at ("duplicate " ^ category ^ " " ^ x.it);
  let i = space.count in
  space.map <- VarMap.add x.it space.count space.map;
  space.count <- Int32.add space.count 1l;
  if space.count = 0l then 
    error x.at ("too many " ^ category ^ " bindings");
  i

let bind_type (c : context) x ty =
  c.types.list <- c.types.list @ [ty];
  bind "type" c.types.space x
let bind_func (c : context) x = bind "function" c.funcs x
let bind_local (c : context) x = bind "local" c.locals x
let bind_global (c : context) x = bind "global" c.globals x
let bind_table (c : context) x = bind "table" c.tables x
let bind_memory (c : context) x = bind "memory" c.memories x
let bind_label (c : context) x =
  {c with labels = VarMap.add x.it 0l (VarMap.map (Int32.add 1l) c.labels)}

let anon category space n =
  let i = space.count in
  space.count <- Int32.add space.count n;
  if I32.lt_u space.count n then
    error no_region ("too many " ^ category ^ " bindings");
  i

let anon_type (c : context) ty =
  c.types.list <- c.types.list @ [ty];
  anon "type" c.types.space 1l
let anon_func (c : context) = anon "function" c.funcs 1l
let anon_locals (c : context) ts =
  ignore (anon "local" c.locals (Lib.List32.length ts))
let anon_global (c : context) = anon "global" c.globals 1l
let anon_table (c : context) = anon "table" c.tables 1l
let anon_memory (c : context) = anon "memory" c.memories 1l
let anon_label (c : context) =
  {c with labels = VarMap.map (Int32.add 1l) c.labels}

let inline_type (c : context) ft at =
  match Lib.List.index_where (fun ty -> ty.it = ft) c.types.list with
  | Some i -> Int32.of_int i @@ at
  | None -> anon_type c (ft @@ at) @@ at

let inline_type_explicit (c : context) x ft at =
  if ft <> FuncType ([], []) && ft <> func_type c x then
    error at "inline function type does not match explicit type";
  x

# 227 "wasm/text/parser.ml"
let yytransl_const = [|
  263 (* ANYFUNC *);
  264 (* MUT *);
  265 (* LPAR *);
  266 (* RPAR *);
  267 (* NOP *);
  268 (* DROP *);
  269 (* BLOCK *);
  270 (* END *);
  271 (* IF *);
  272 (* THEN *);
  273 (* ELSE *);
  274 (* SELECT *);
  275 (* LOOP *);
  276 (* BR *);
  277 (* BR_IF *);
  278 (* BR_TABLE *);
  279 (* CALL *);
  280 (* CALL_INDIRECT *);
  281 (* RETURN *);
  282 (* GET_LOCAL *);
  283 (* SET_LOCAL *);
  284 (* TEE_LOCAL *);
  285 (* GET_GLOBAL *);
  286 (* SET_GLOBAL *);
  297 (* UNREACHABLE *);
  298 (* CURRENT_MEMORY *);
  299 (* GROW_MEMORY *);
  300 (* FUNC *);
  301 (* START *);
  302 (* TYPE *);
  303 (* PARAM *);
  304 (* RESULT *);
  305 (* LOCAL *);
  306 (* GLOBAL *);
  307 (* TABLE *);
  308 (* ELEM *);
  309 (* MEMORY *);
  310 (* DATA *);
  311 (* OFFSET *);
  312 (* IMPORT *);
  313 (* EXPORT *);
  314 (* MODULE *);
  315 (* BIN *);
  316 (* QUOTE *);
  317 (* SCRIPT *);
  318 (* REGISTER *);
  319 (* INVOKE *);
  320 (* GET *);
  321 (* ASSERT_MALFORMED *);
  322 (* ASSERT_INVALID *);
  323 (* ASSERT_SOFT_INVALID *);
  324 (* ASSERT_UNLINKABLE *);
  325 (* ASSERT_RETURN *);
  326 (* ASSERT_RETURN_CANONICAL_NAN *);
  327 (* ASSERT_RETURN_ARITHMETIC_NAN *);
  328 (* ASSERT_TRAP *);
  329 (* ASSERT_EXHAUSTION *);
  330 (* INPUT *);
  331 (* OUTPUT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NAT *);
  258 (* INT *);
  259 (* FLOAT *);
  260 (* STRING *);
  261 (* VAR *);
  262 (* VALUE_TYPE *);
  287 (* LOAD *);
  288 (* STORE *);
  289 (* OFFSET_EQ_NAT *);
  290 (* ALIGN_EQ_NAT *);
  291 (* CONST *);
  292 (* UNARY *);
  293 (* BINARY *);
  294 (* TEST *);
  295 (* COMPARE *);
  296 (* CONVERT *);
    0|]

let yylhs = "\255\255\
\004\000\005\000\005\000\006\000\006\000\007\000\008\000\008\000\
\009\000\010\000\010\000\010\000\010\000\012\000\014\000\013\000\
\013\000\015\000\017\000\017\000\017\000\016\000\016\000\018\000\
\018\000\019\000\019\000\011\000\020\000\020\000\021\000\021\000\
\022\000\022\000\023\000\023\000\024\000\024\000\024\000\024\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\026\000\029\000\029\000\030\000\030\000\031\000\031\000\027\000\
\027\000\027\000\027\000\034\000\032\000\032\000\028\000\035\000\
\035\000\035\000\035\000\035\000\037\000\037\000\039\000\039\000\
\040\000\040\000\038\000\038\000\041\000\041\000\041\000\033\000\
\033\000\036\000\036\000\042\000\043\000\044\000\044\000\044\000\
\044\000\044\000\047\000\047\000\047\000\049\000\049\000\045\000\
\045\000\045\000\050\000\050\000\051\000\051\000\051\000\052\000\
\052\000\053\000\053\000\054\000\055\000\055\000\055\000\055\000\
\056\000\056\000\057\000\058\000\058\000\058\000\058\000\059\000\
\060\000\060\000\060\000\061\000\061\000\061\000\061\000\061\000\
\062\000\046\000\063\000\063\000\063\000\063\000\064\000\048\000\
\065\000\066\000\066\000\067\000\068\000\068\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\070\000\070\000\071\000\072\000\073\000\074\000\074\000\075\000\
\075\000\075\000\076\000\076\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\079\000\079\000\079\000\
\079\000\079\000\081\000\081\000\080\000\080\000\080\000\080\000\
\082\000\077\000\077\000\001\000\001\000\002\000\003\000\003\000\
\000\000\000\000\000\000"

let yylen = "\002\000\
\001\000\000\000\002\000\000\000\002\000\001\000\001\000\004\000\
\004\000\000\000\005\000\005\000\006\000\002\000\001\000\001\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\000\000\
\002\000\000\000\001\000\001\000\000\000\001\000\000\000\001\000\
\000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\003\000\001\000\002\000\001\000\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\001\000\001\000\002\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\001\000\005\000\001\000\005\000\001\000\005\000\
\005\000\005\000\008\000\004\000\002\000\001\000\003\000\002\000\
\002\000\003\000\003\000\003\000\002\000\001\000\005\000\001\000\
\005\000\001\000\002\000\001\000\002\000\008\000\004\000\000\000\
\002\000\000\000\002\000\001\000\005\000\002\000\001\000\003\000\
\002\000\002\000\001\000\005\000\006\000\000\000\005\000\001\000\
\005\000\006\000\001\000\005\000\001\000\005\000\006\000\004\000\
\001\000\006\000\005\000\005\000\001\000\002\000\002\000\005\000\
\006\000\005\000\005\000\001\000\002\000\002\000\004\000\005\000\
\002\000\002\000\002\000\005\000\005\000\005\000\005\000\005\000\
\006\000\005\000\004\000\004\000\004\000\004\000\005\000\004\000\
\001\000\004\000\005\000\004\000\000\000\001\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\000\000\001\000\005\000\001\000\001\000\000\000\001\000\001\000\
\006\000\006\000\006\000\005\000\005\000\005\000\005\000\005\000\
\005\000\004\000\004\000\005\000\005\000\001\000\001\000\001\000\
\005\000\001\000\000\000\002\000\005\000\005\000\005\000\004\000\
\004\000\000\000\002\000\002\000\002\000\001\000\002\000\002\000\
\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\209\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\173\000\176\000\000\000\192\000\190\000\191\000\000\000\194\000\
\000\000\000\000\210\000\206\000\000\000\211\000\172\000\158\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\163\000\164\000\161\000\165\000\
\162\000\160\000\167\000\168\000\159\000\166\000\205\000\196\000\
\204\000\000\000\207\000\208\000\028\000\027\000\000\000\022\000\
\023\000\000\000\000\000\153\000\000\000\000\000\000\000\000\000\
\000\000\000\000\121\000\000\000\000\000\000\000\002\000\001\000\
\000\000\000\000\170\000\000\000\175\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\048\000\000\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\063\000\060\000\
\061\000\064\000\041\000\057\000\058\000\000\000\000\000\037\000\
\038\000\039\000\040\000\117\000\000\000\103\000\000\000\000\000\
\112\000\115\000\156\000\000\000\000\000\154\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\125\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\132\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\002\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\186\000\
\187\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\000\000\
\000\000\043\000\044\000\000\000\047\000\000\000\000\000\071\000\
\065\000\067\000\069\000\050\000\051\000\052\000\053\000\054\000\
\034\000\000\000\000\000\019\000\020\000\021\000\059\000\000\000\
\102\000\000\000\097\000\101\000\000\000\000\000\105\000\107\000\
\106\000\000\000\000\000\155\000\000\000\100\000\137\000\000\000\
\138\000\139\000\136\000\017\000\000\000\014\000\126\000\127\000\
\124\000\000\000\000\000\000\000\000\000\000\000\000\000\090\000\
\081\000\086\000\088\000\000\000\080\000\079\000\000\000\025\000\
\123\000\002\000\133\000\134\000\131\000\000\000\003\000\130\000\
\000\000\000\000\000\000\000\000\000\000\000\000\151\000\000\000\
\000\000\171\000\197\000\193\000\000\000\180\000\181\000\182\000\
\183\000\000\000\185\000\203\000\184\000\188\000\189\000\198\000\
\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\066\000\036\000\055\000\056\000\
\000\000\000\000\000\000\104\000\000\000\000\000\009\000\000\000\
\000\000\082\000\000\000\000\000\000\000\084\000\092\000\083\000\
\000\000\000\000\000\000\085\000\099\000\120\000\122\000\000\000\
\129\000\000\000\000\000\000\000\000\000\145\000\000\000\000\000\
\000\000\000\000\177\000\178\000\179\000\000\000\018\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\152\000\000\000\
\000\000\077\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\093\000\091\000\000\000\000\000\135\000\000\000\000\000\
\000\000\000\000\147\000\150\000\148\000\149\000\201\000\113\000\
\000\000\000\000\116\000\000\000\118\000\000\000\146\000\000\000\
\032\000\072\000\074\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\114\000\
\119\000\076\000\000\000\068\000\000\000\070\000\108\000\000\000\
\000\000\111\000\012\000\000\000\011\000\000\000\087\000\000\000\
\089\000\141\000\140\000\144\000\142\000\143\000\000\000\109\000\
\013\000\000\000\075\000\000\000\000\000\094\000"

let yydgoto = "\004\000\
\006\000\027\000\030\000\097\000\199\000\076\001\176\000\169\000\
\084\000\011\001\078\000\177\000\178\000\194\000\150\000\190\000\
\255\000\191\000\079\000\231\000\186\001\250\000\095\001\151\000\
\152\000\153\000\154\000\155\000\241\000\242\000\243\000\084\001\
\156\000\086\001\188\000\032\001\033\001\110\001\034\001\035\001\
\111\001\015\001\007\000\157\000\158\000\159\000\007\001\160\000\
\008\001\161\000\162\000\092\000\008\000\009\000\181\000\010\000\
\011\000\197\000\012\000\172\000\050\001\013\000\202\000\014\000\
\086\000\015\000\016\000\205\000\032\000\100\000\018\000\034\000\
\019\000\102\000\020\000\021\000\214\000\022\000\023\000\024\000\
\025\000\215\000"

let yysindex = "\021\001\
\021\255\065\255\080\255\000\000\003\005\000\000\122\255\122\255\
\122\255\122\255\122\255\122\255\122\255\122\255\122\255\122\255\
\000\000\000\000\101\000\000\000\000\000\000\000\065\255\000\000\
\133\000\149\255\000\000\000\000\184\255\000\000\000\000\000\000\
\156\000\166\000\169\255\199\255\196\255\169\255\169\255\060\255\
\169\255\060\255\204\255\204\255\198\255\227\255\204\255\198\255\
\198\255\207\255\207\255\207\255\217\255\217\255\217\255\237\255\
\217\255\227\255\227\255\079\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\198\255\000\000\000\000\000\000\000\000\168\003\000\000\
\000\000\234\255\249\255\000\000\049\000\051\000\100\255\084\255\
\178\000\050\000\000\000\199\255\055\255\050\000\000\000\000\000\
\204\255\053\000\000\000\035\255\000\000\065\255\198\255\204\255\
\204\255\213\255\059\000\063\000\064\000\033\255\060\000\061\000\
\066\000\117\255\070\000\073\000\074\000\076\000\163\255\122\255\
\131\000\000\000\000\000\169\255\169\255\000\000\169\255\199\255\
\199\255\199\255\199\255\203\003\000\000\199\255\199\255\199\255\
\199\255\199\255\037\000\037\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\238\003\017\004\000\000\
\000\000\000\000\000\000\000\000\071\000\000\000\075\000\168\003\
\000\000\000\000\000\000\078\000\072\000\000\000\000\000\069\255\
\017\004\135\255\100\255\080\000\082\000\000\000\203\255\084\000\
\000\000\081\000\088\000\084\255\089\000\169\255\169\255\169\255\
\091\000\017\004\092\000\093\000\199\255\199\255\094\000\211\255\
\000\000\000\000\088\000\055\255\095\000\000\000\181\255\097\000\
\009\255\116\000\000\000\000\000\118\000\124\000\127\000\060\000\
\129\000\130\000\135\000\137\000\056\000\138\000\060\000\000\000\
\000\000\165\000\171\000\172\000\173\000\174\000\000\000\199\255\
\178\255\096\000\178\255\204\255\204\255\000\000\052\004\052\004\
\052\004\000\000\000\000\199\255\000\000\071\001\087\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\142\000\142\000\000\000\000\000\000\000\000\000\216\000\
\000\000\002\005\000\000\000\000\252\255\098\000\000\000\000\000\
\000\000\254\255\175\000\000\000\180\000\000\000\000\000\077\000\
\000\000\000\000\000\000\000\000\140\000\000\000\000\000\000\000\
\000\000\052\004\132\000\052\004\109\001\186\000\092\000\000\000\
\000\000\000\000\000\000\202\000\000\000\000\000\212\000\000\000\
\000\000\000\000\000\000\000\000\000\000\183\255\000\000\000\000\
\118\255\213\000\199\255\199\255\199\255\199\255\000\000\192\255\
\221\255\000\000\000\000\000\000\214\000\000\000\000\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\215\000\096\000\220\000\205\000\222\000\239\000\244\000\
\204\255\250\000\001\002\247\000\000\000\017\004\247\255\248\000\
\000\000\096\000\096\000\147\001\000\000\000\000\000\000\000\000\
\178\255\096\000\001\000\000\000\178\255\096\000\000\000\003\001\
\199\255\000\000\185\001\217\000\132\000\000\000\000\000\000\000\
\096\000\096\000\219\001\000\000\000\000\000\000\000\000\235\255\
\000\000\169\255\169\255\169\255\169\255\000\000\005\001\006\001\
\022\001\023\001\000\000\000\000\000\000\033\001\000\000\000\000\
\238\003\034\001\122\004\157\004\035\001\036\001\000\000\046\001\
\169\255\000\000\169\255\169\255\169\255\044\001\045\001\061\001\
\066\001\075\001\078\001\098\001\095\001\000\000\105\001\017\004\
\225\004\000\000\000\000\113\001\115\001\000\000\107\001\135\255\
\088\000\088\000\000\000\000\000\000\000\000\000\000\000\000\000\
\238\003\255\000\000\000\038\001\000\000\157\004\000\000\116\001\
\000\000\000\000\000\000\017\004\000\000\087\004\192\004\098\000\
\132\001\134\001\078\000\143\001\078\000\000\000\144\001\186\000\
\152\001\005\000\153\001\154\001\170\001\171\001\181\001\000\000\
\000\000\000\000\178\001\000\000\035\002\000\000\000\000\098\000\
\145\001\000\000\000\000\078\000\000\000\190\001\000\000\069\002\
\000\000\000\000\000\000\000\000\000\000\000\000\169\255\000\000\
\000\000\201\001\000\000\017\004\192\001\000\000"

let yyrindex = "\000\000\
\219\002\000\000\229\002\000\000\000\000\000\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\003\000\000\000\000\007\000\141\255\000\000\
\075\255\000\000\000\000\000\000\119\255\017\000\000\000\231\001\
\231\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\232\001\239\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\000\000\000\000\000\000\000\000\242\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\243\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\253\001\000\000\254\001\255\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\001\
\000\000\000\000\000\000\063\003\249\002\000\000\063\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\109\002\109\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\242\001\172\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\002\242\001\
\000\000\000\000\000\000\008\002\000\000\000\000\000\000\000\000\
\242\001\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\003\080\255\098\003\
\024\002\242\001\024\002\000\000\243\001\144\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\002\
\000\000\000\000\000\000\000\000\000\000\000\000\005\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\002\025\002\025\002\000\000\000\000\000\000\031\002\011\000\
\031\002\000\000\000\000\144\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\179\002\179\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\242\001\000\000\242\001\000\000\024\002\024\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\172\255\000\000\000\000\
\000\000\025\002\025\002\000\000\000\000\000\000\000\000\000\000\
\025\002\025\002\000\000\000\000\025\002\025\002\000\000\000\000\
\243\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\002\025\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\007\000\050\002\050\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\242\001\000\000\242\001\242\001\000\000\000\000\000\000\000\000\
\214\002\000\000\214\002\133\003\214\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\001\
\000\000\000\000\000\000\000\000\000\000\000\000\008\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\242\001\000\000\000\000\000\000\000\000\242\001\000\000\000\000\
\000\000\000\000\000\000\031\002\000\000\000\000\000\000\007\002\
\000\000\007\002\008\002\000\000\008\002\000\000\000\000\024\002\
\024\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\002\
\000\000\000\000\000\000\008\002\000\000\042\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\214\002\000\000\
\000\000\000\000\000\000\242\001\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\222\255\101\255\063\255\146\002\102\255\
\000\000\134\254\219\255\094\255\165\255\082\255\139\255\238\255\
\003\002\092\255\229\255\209\255\147\254\195\002\090\002\131\255\
\170\255\000\000\000\000\220\255\000\000\037\255\151\001\074\255\
\106\255\014\255\000\000\096\255\000\000\249\001\254\254\158\001\
\006\002\183\002\000\000\211\002\111\255\200\255\017\255\215\255\
\187\001\233\001\173\254\013\000\000\000\000\000\218\002\000\000\
\000\000\220\002\000\000\006\003\000\000\000\000\000\000\000\000\
\093\003\000\000\000\000\106\001\194\003\018\000\209\003\000\000\
\000\000\254\000\107\000\201\000\127\255\000\000\211\003\000\000\
\006\000\000\000"

let yytablesize = 1614
let yytable = "\085\000\
\003\001\193\000\187\000\091\000\001\001\091\000\240\000\157\000\
\195\000\098\000\087\000\088\000\103\000\093\000\239\000\017\001\
\023\001\082\000\014\001\093\001\043\001\090\000\100\001\094\000\
\039\001\040\001\037\001\116\001\072\000\005\000\170\000\179\000\
\078\001\079\001\187\000\014\001\195\000\187\001\188\001\189\001\
\109\001\006\001\046\001\060\000\203\001\171\000\180\000\056\001\
\057\001\087\001\088\001\196\000\051\001\091\000\095\000\173\000\
\181\001\091\000\052\001\053\001\080\000\054\001\200\000\192\000\
\081\000\104\000\105\000\030\001\089\000\208\000\209\000\089\001\
\219\001\026\000\221\001\026\000\013\001\232\000\061\001\233\000\
\085\001\085\001\085\001\026\000\173\000\068\001\230\000\230\000\
\029\000\230\000\174\000\120\000\175\000\203\000\204\000\048\000\
\049\000\233\001\209\001\106\001\071\000\112\001\189\000\193\000\
\193\000\167\000\198\000\206\000\168\000\234\000\235\000\236\000\
\237\000\240\000\170\000\244\000\245\000\246\000\247\000\248\000\
\207\000\235\001\109\001\179\000\228\000\229\000\117\001\169\000\
\169\000\171\000\060\000\085\001\073\000\085\001\026\001\027\001\
\028\001\136\001\180\000\195\000\167\000\026\000\120\001\016\001\
\230\000\230\000\230\000\026\000\031\001\026\000\031\001\187\000\
\150\001\151\001\196\000\075\000\107\000\108\000\109\000\152\001\
\154\001\122\001\115\000\155\001\157\001\076\000\222\000\123\001\
\124\001\187\000\125\001\187\000\223\000\077\000\045\000\164\001\
\165\001\169\000\169\000\048\000\049\000\096\000\077\000\075\001\
\047\001\096\000\047\001\077\001\096\000\080\001\048\001\146\001\
\121\001\081\001\082\001\047\001\159\001\223\001\187\000\080\000\
\077\000\131\001\099\000\081\000\083\000\074\001\045\000\096\000\
\215\001\046\000\047\000\048\000\049\000\050\000\051\000\106\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\047\001\110\000\212\001\035\000\036\000\037\000\132\001\101\000\
\232\001\038\000\039\000\040\000\041\000\042\000\047\001\043\000\
\044\000\074\000\174\000\163\000\166\001\114\000\108\001\176\001\
\174\000\031\001\031\001\207\001\187\000\111\000\112\000\113\000\
\116\000\117\000\228\000\229\000\147\001\187\000\206\001\148\001\
\042\001\199\001\228\000\229\000\026\000\205\001\045\000\026\000\
\016\000\157\000\195\000\016\000\187\000\001\000\002\000\003\000\
\096\000\174\000\174\000\096\000\187\000\169\000\169\000\208\001\
\127\001\128\001\129\001\130\001\164\000\211\001\252\000\253\000\
\254\000\224\000\097\001\098\001\101\001\102\001\142\001\097\001\
\098\001\204\001\224\000\101\001\102\001\026\000\026\000\118\000\
\119\000\083\000\089\000\153\001\166\000\201\000\210\000\156\001\
\240\000\240\000\211\000\212\000\213\000\249\000\216\000\108\001\
\108\001\218\000\187\000\217\000\219\000\220\000\193\000\221\000\
\004\001\012\001\020\001\005\001\013\001\237\001\010\001\174\000\
\173\000\019\001\066\001\187\000\021\001\187\000\167\001\168\001\
\169\001\170\001\025\001\029\001\002\001\075\001\038\001\041\001\
\045\001\049\001\099\001\185\001\031\000\185\001\185\001\185\001\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\035\000\036\000\037\000\055\001\187\000\058\001\
\038\000\039\000\040\000\041\000\042\000\059\001\043\000\044\000\
\060\001\187\000\062\001\063\001\107\001\122\000\123\000\182\000\
\064\001\183\000\065\001\067\001\126\000\184\000\128\000\129\000\
\130\000\131\000\185\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\031\001\031\001\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\069\001\094\001\
\224\000\225\000\226\000\227\000\070\001\071\001\072\001\073\001\
\103\001\104\001\228\000\229\000\122\000\123\000\182\000\105\001\
\183\000\185\001\115\001\126\000\184\000\128\000\129\000\130\000\
\131\000\185\000\133\000\134\000\135\000\136\000\137\000\138\000\
\139\000\140\000\138\001\118\001\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\119\001\126\001\133\001\
\135\001\161\001\122\000\123\000\182\000\137\001\183\000\139\001\
\186\000\126\000\184\000\128\000\129\000\130\000\131\000\185\000\
\133\000\134\000\135\000\136\000\137\000\138\000\139\000\140\000\
\140\001\141\001\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\143\001\145\001\149\001\225\000\226\000\
\227\000\122\000\123\000\182\000\158\001\183\000\171\001\172\001\
\126\000\184\000\128\000\129\000\130\000\131\000\185\000\133\000\
\134\000\135\000\136\000\137\000\138\000\139\000\140\000\173\001\
\174\001\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\175\001\177\001\182\001\183\001\226\000\227\000\
\122\000\123\000\182\000\184\001\183\000\190\001\191\001\126\000\
\184\000\128\000\129\000\130\000\131\000\185\000\133\000\134\000\
\135\000\136\000\137\000\138\000\139\000\140\000\192\001\193\001\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\122\000\123\000\182\000\194\001\183\000\227\000\195\001\
\126\000\184\000\128\000\129\000\130\000\131\000\185\000\133\000\
\134\000\135\000\136\000\137\000\138\000\139\000\140\000\196\001\
\197\001\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\198\001\202\001\224\000\090\001\091\001\122\000\
\123\000\182\000\200\001\183\000\201\001\210\001\126\000\184\000\
\128\000\129\000\130\000\131\000\185\000\133\000\134\000\135\000\
\136\000\137\000\138\000\139\000\140\000\216\001\217\001\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\220\001\222\001\224\000\113\001\114\001\122\000\123\000\182\000\
\224\001\183\000\226\001\227\001\126\000\184\000\128\000\129\000\
\130\000\131\000\185\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\228\001\229\001\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\230\001\231\001\
\098\001\090\001\091\001\122\000\123\000\182\000\234\001\183\000\
\160\001\238\001\126\000\184\000\128\000\129\000\130\000\131\000\
\185\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\236\001\195\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\157\000\122\000\123\000\182\000\
\144\001\183\000\169\000\174\000\126\000\184\000\128\000\129\000\
\130\000\131\000\185\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\096\000\024\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\157\000\195\000\
\169\000\113\001\114\001\122\000\123\000\182\000\202\000\183\000\
\110\000\010\000\126\000\184\000\128\000\129\000\130\000\131\000\
\185\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\098\000\004\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\096\000\122\000\123\000\182\000\
\144\001\183\000\026\000\095\000\126\000\184\000\128\000\129\000\
\130\000\131\000\185\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\022\001\134\001\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\251\000\122\000\
\123\000\182\000\091\001\183\000\096\001\214\001\126\000\184\000\
\128\000\129\000\130\000\131\000\185\000\133\000\134\000\135\000\
\136\000\137\000\138\000\139\000\140\000\163\001\225\001\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\036\001\162\001\009\001\179\001\114\001\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\218\001\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\024\001\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\044\001\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\018\001\165\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\017\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\033\000\028\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
\000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\026\000\026\000\026\000\026\000\
\026\000\000\000\026\000\000\000\000\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\000\000\000\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\029\000\
\000\000\029\000\029\000\029\000\029\000\029\000\000\000\000\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\000\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\000\000\
\029\000\000\000\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\000\000\000\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\031\000\000\000\031\000\
\031\000\031\000\031\000\031\000\000\000\000\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\000\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\121\000\000\000\122\000\123\000\124\000\000\000\125\000\000\000\
\000\000\126\000\127\000\128\000\129\000\130\000\131\000\132\000\
\133\000\134\000\135\000\136\000\137\000\138\000\139\000\140\000\
\000\000\000\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\238\000\000\000\122\000\123\000\124\000\
\000\000\125\000\000\000\000\000\126\000\127\000\128\000\129\000\
\130\000\131\000\132\000\133\000\134\000\135\000\136\000\137\000\
\138\000\139\000\140\000\000\000\000\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\000\001\000\000\
\122\000\123\000\124\000\000\000\125\000\000\000\000\000\126\000\
\127\000\128\000\129\000\130\000\131\000\132\000\133\000\134\000\
\135\000\136\000\137\000\138\000\139\000\140\000\000\000\000\000\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\002\001\000\000\122\000\123\000\124\000\000\000\125\000\
\000\000\000\000\126\000\127\000\128\000\129\000\130\000\131\000\
\132\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\000\000\000\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\083\001\000\000\122\000\123\000\
\124\000\000\000\125\000\000\000\000\000\126\000\127\000\128\000\
\129\000\130\000\131\000\132\000\133\000\134\000\135\000\136\000\
\137\000\138\000\139\000\140\000\000\000\000\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\092\001\
\000\000\122\000\123\000\124\000\000\000\125\000\000\000\000\000\
\126\000\127\000\128\000\129\000\130\000\131\000\132\000\133\000\
\134\000\135\000\136\000\137\000\138\000\139\000\140\000\000\000\
\000\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\178\001\000\000\122\000\123\000\124\000\000\000\
\125\000\000\000\000\000\126\000\127\000\128\000\129\000\130\000\
\131\000\132\000\133\000\134\000\135\000\136\000\137\000\138\000\
\139\000\140\000\000\000\000\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\180\001\000\000\122\000\
\123\000\124\000\000\000\125\000\000\000\000\000\126\000\127\000\
\128\000\129\000\130\000\131\000\132\000\133\000\134\000\135\000\
\136\000\137\000\138\000\139\000\140\000\000\000\000\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\213\001\000\000\122\000\123\000\124\000\000\000\125\000\000\000\
\000\000\126\000\127\000\128\000\129\000\130\000\131\000\132\000\
\133\000\134\000\135\000\136\000\137\000\138\000\139\000\140\000\
\000\000\000\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\122\000\123\000\182\000\000\000\183\000\
\160\001\000\000\126\000\184\000\128\000\129\000\130\000\131\000\
\185\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\000\000\000\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\122\000\123\000\182\000\000\000\
\183\000\000\000\000\000\126\000\184\000\128\000\129\000\130\000\
\131\000\185\000\133\000\134\000\135\000\136\000\137\000\138\000\
\139\000\140\000\000\000\000\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\000\000\035\000\036\000\
\037\000\000\000\000\000\000\000\038\000\039\000\040\000\041\000\
\042\000\000\000\043\000\044\000\045\000\000\000\000\000\046\000\
\047\000\048\000\049\000\050\000\051\000\000\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000"

let yycheck = "\037\000\
\151\000\093\000\089\000\040\000\150\000\042\000\132\000\000\000\
\000\000\044\000\038\000\039\000\047\000\041\000\132\000\170\000\
\179\000\036\000\169\000\239\000\195\000\040\000\006\001\042\000\
\189\000\190\000\187\000\030\001\023\000\009\001\087\000\088\000\
\226\000\227\000\121\000\186\000\093\000\147\001\148\001\149\001\
\027\001\159\000\198\000\009\001\167\001\087\000\088\000\203\000\
\204\000\232\000\233\000\093\000\044\001\090\000\042\000\001\001\
\140\001\094\000\050\001\051\001\001\001\053\001\097\000\009\001\
\005\001\048\000\049\000\185\000\009\001\104\000\105\000\236\000\
\195\001\009\001\197\001\001\001\008\001\125\000\208\000\127\000\
\231\000\232\000\233\000\009\001\001\001\215\000\124\000\125\000\
\009\001\127\000\007\001\074\000\009\001\059\001\060\001\063\001\
\064\001\220\001\182\001\026\001\000\000\028\001\090\000\195\000\
\196\000\006\001\094\000\102\000\009\001\128\000\129\000\130\000\
\131\000\239\000\171\000\134\000\135\000\136\000\137\000\138\000\
\103\000\231\001\109\001\180\000\056\001\057\001\031\001\009\001\
\010\001\171\000\009\001\026\001\000\000\028\001\182\000\183\000\
\184\000\075\001\180\000\196\000\006\001\001\001\042\001\009\001\
\182\000\183\000\184\000\007\001\185\000\009\001\187\000\238\000\
\090\001\091\001\196\000\000\000\050\000\051\000\052\000\097\001\
\098\001\044\001\056\000\101\001\102\001\000\000\004\001\050\001\
\051\001\000\001\053\001\002\001\010\001\005\001\058\001\113\001\
\114\001\059\001\060\001\063\001\064\001\010\001\005\001\006\001\
\004\001\014\001\004\001\225\000\017\001\227\000\010\001\086\001\
\010\001\228\000\229\000\004\001\105\001\200\001\029\001\001\001\
\005\001\010\001\005\001\005\001\009\001\224\000\058\001\004\001\
\192\001\061\001\062\001\063\001\064\001\065\001\066\001\009\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\004\001\009\001\190\001\044\001\045\001\046\001\010\001\005\001\
\216\001\050\001\051\001\052\001\053\001\054\001\004\001\056\001\
\057\001\058\001\004\001\010\001\010\001\009\001\027\001\137\001\
\010\001\030\001\031\001\170\001\083\001\053\000\054\000\055\000\
\056\000\057\000\056\001\057\001\014\001\092\001\169\001\017\001\
\054\001\160\001\056\001\057\001\006\001\168\001\058\001\009\001\
\007\001\010\001\010\001\010\001\107\001\001\000\002\000\003\000\
\014\001\009\001\010\001\017\001\115\001\009\001\010\001\177\001\
\051\001\052\001\053\001\054\001\044\001\188\001\001\001\002\001\
\003\001\046\001\047\001\048\001\047\001\048\001\081\001\047\001\
\048\001\167\001\046\001\047\001\048\001\009\001\010\001\058\000\
\059\000\009\001\009\001\097\001\010\001\009\001\004\001\101\001\
\190\001\191\001\004\001\004\001\009\001\033\001\010\001\108\001\
\109\001\004\001\161\001\010\001\004\001\004\001\170\001\004\001\
\010\001\010\001\001\001\009\001\008\001\236\001\009\001\007\001\
\001\001\010\001\035\001\178\001\009\001\180\001\122\001\123\001\
\124\001\125\001\010\001\009\001\009\001\006\001\010\001\010\001\
\010\001\009\001\009\001\145\001\003\000\147\001\148\001\149\001\
\007\000\008\000\009\000\010\000\011\000\012\000\013\000\014\000\
\015\000\016\000\044\001\045\001\046\001\010\001\213\001\010\001\
\050\001\051\001\052\001\053\001\054\001\010\001\056\001\057\001\
\010\001\224\001\010\001\010\001\009\001\011\001\012\001\013\001\
\010\001\015\001\010\001\010\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\200\001\201\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\010\001\034\001\
\046\001\047\001\048\001\049\001\010\001\010\001\010\001\010\001\
\010\001\006\001\056\001\057\001\011\001\012\001\013\001\052\001\
\015\001\231\001\009\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\006\001\010\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\010\001\010\001\010\001\
\010\001\009\001\011\001\012\001\013\001\010\001\015\001\010\001\
\055\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\010\001\006\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\010\001\014\001\014\001\047\001\048\001\
\049\001\011\001\012\001\013\001\010\001\015\001\010\001\010\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\010\001\
\010\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\010\001\010\001\010\001\010\001\048\001\049\001\
\011\001\012\001\013\001\006\001\015\001\010\001\010\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\010\001\006\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\011\001\012\001\013\001\010\001\015\001\049\001\010\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\006\001\
\010\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\010\001\009\001\046\001\047\001\048\001\011\001\
\012\001\013\001\010\001\015\001\010\001\010\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\010\001\009\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\010\001\010\001\046\001\047\001\048\001\011\001\012\001\013\001\
\009\001\015\001\010\001\010\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\010\001\010\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\010\001\014\001\
\048\001\047\001\048\001\011\001\012\001\013\001\009\001\015\001\
\016\001\010\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\017\001\000\000\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\000\000\011\001\012\001\013\001\
\048\001\015\001\004\001\004\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\010\001\010\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\010\001\010\001\
\010\001\047\001\048\001\011\001\012\001\013\001\010\001\015\001\
\010\001\010\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\010\001\010\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\014\001\011\001\012\001\013\001\
\048\001\015\001\001\001\010\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\178\000\066\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\140\000\011\001\
\012\001\013\001\048\001\015\001\251\000\191\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\109\001\201\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\186\000\108\001\160\000\139\001\048\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\194\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\180\000\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\196\000\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\171\000\085\000\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\001\000\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\003\000\002\000\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\009\001\255\255\011\001\012\001\013\001\255\255\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\009\001\255\255\011\001\012\001\013\001\
\255\255\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\009\001\255\255\
\011\001\012\001\013\001\255\255\015\001\255\255\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\009\001\255\255\011\001\012\001\013\001\255\255\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\009\001\255\255\011\001\012\001\
\013\001\255\255\015\001\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\009\001\
\255\255\011\001\012\001\013\001\255\255\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\009\001\255\255\011\001\012\001\013\001\255\255\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\009\001\255\255\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\009\001\255\255\011\001\012\001\013\001\255\255\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\011\001\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\011\001\012\001\013\001\255\255\
\015\001\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\044\001\045\001\
\046\001\255\255\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\255\255\056\001\057\001\058\001\255\255\255\255\061\001\
\062\001\063\001\064\001\065\001\066\001\255\255\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001"

let yynames_const = "\
  ANYFUNC\000\
  MUT\000\
  LPAR\000\
  RPAR\000\
  NOP\000\
  DROP\000\
  BLOCK\000\
  END\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SELECT\000\
  LOOP\000\
  BR\000\
  BR_IF\000\
  BR_TABLE\000\
  CALL\000\
  CALL_INDIRECT\000\
  RETURN\000\
  GET_LOCAL\000\
  SET_LOCAL\000\
  TEE_LOCAL\000\
  GET_GLOBAL\000\
  SET_GLOBAL\000\
  UNREACHABLE\000\
  CURRENT_MEMORY\000\
  GROW_MEMORY\000\
  FUNC\000\
  START\000\
  TYPE\000\
  PARAM\000\
  RESULT\000\
  LOCAL\000\
  GLOBAL\000\
  TABLE\000\
  ELEM\000\
  MEMORY\000\
  DATA\000\
  OFFSET\000\
  IMPORT\000\
  EXPORT\000\
  MODULE\000\
  BIN\000\
  QUOTE\000\
  SCRIPT\000\
  REGISTER\000\
  INVOKE\000\
  GET\000\
  ASSERT_MALFORMED\000\
  ASSERT_INVALID\000\
  ASSERT_SOFT_INVALID\000\
  ASSERT_UNLINKABLE\000\
  ASSERT_RETURN\000\
  ASSERT_RETURN_CANONICAL_NAN\000\
  ASSERT_RETURN_ARITHMETIC_NAN\000\
  ASSERT_TRAP\000\
  ASSERT_EXHAUSTION\000\
  INPUT\000\
  OUTPUT\000\
  EOF\000\
  "

let yynames_block = "\
  NAT\000\
  INT\000\
  FLOAT\000\
  STRING\000\
  VAR\000\
  VALUE_TYPE\000\
  LOAD\000\
  STORE\000\
  OFFSET_EQ_NAT\000\
  ALIGN_EQ_NAT\000\
  CONST\000\
  UNARY\000\
  BINARY\000\
  TEST\000\
  COMPARE\000\
  CONVERT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 194 "wasm/text/parser.mly"
           ( name _1 (at ()) )
# 1084 "wasm/text/parser.ml"
               : 'name))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "wasm/text/parser.mly"
                ( "" )
# 1090 "wasm/text/parser.ml"
               : 'string_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 198 "wasm/text/parser.mly"
                       ( _1 ^ _2 )
# 1098 "wasm/text/parser.ml"
               : 'string_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "wasm/text/parser.mly"
                ( [] )
# 1104 "wasm/text/parser.ml"
               : 'value_type_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Wasm_types.value_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'value_type_list) in
    Obj.repr(
# 205 "wasm/text/parser.mly"
                               ( _1 :: _2 )
# 1112 "wasm/text/parser.ml"
               : 'value_type_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 208 "wasm/text/parser.mly"
            ( AnyFuncType )
# 1118 "wasm/text/parser.ml"
               : 'elem_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Wasm_types.value_type) in
    Obj.repr(
# 211 "wasm/text/parser.mly"
               ( GlobalType (_1, Immutable) )
# 1125 "wasm/text/parser.ml"
               : 'global_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Wasm_types.value_type) in
    Obj.repr(
# 212 "wasm/text/parser.mly"
                             ( GlobalType (_3, Mutable) )
# 1132 "wasm/text/parser.ml"
               : 'global_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'func_sig) in
    Obj.repr(
# 215 "wasm/text/parser.mly"
                            ( _3 )
# 1139 "wasm/text/parser.ml"
               : 'func_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 219 "wasm/text/parser.mly"
    ( FuncType ([], []) )
# 1145 "wasm/text/parser.ml"
               : 'func_sig))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_sig) in
    Obj.repr(
# 221 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = _5 in
      if ins <> [] then error (at ()) "result before parameter";
      FuncType (ins, _3 @ out) )
# 1155 "wasm/text/parser.ml"
               : 'func_sig))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_sig) in
    Obj.repr(
# 225 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = _5 in FuncType (_3 @ ins, out) )
# 1163 "wasm/text/parser.ml"
               : 'func_sig))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Wasm_types.value_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'func_sig) in
    Obj.repr(
# 227 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = _6 in FuncType (_4 :: ins, out) )
# 1172 "wasm/text/parser.ml"
               : 'func_sig))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'limits) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elem_type) in
    Obj.repr(
# 230 "wasm/text/parser.mly"
                     ( TableType (_1, _2) )
# 1180 "wasm/text/parser.ml"
               : 'table_sig))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'limits) in
    Obj.repr(
# 233 "wasm/text/parser.mly"
           ( MemoryType _1 )
# 1187 "wasm/text/parser.ml"
               : 'memory_sig))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 236 "wasm/text/parser.mly"
        ( {min = nat32 _1 (ati 1); max = None} )
# 1194 "wasm/text/parser.ml"
               : 'limits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 237 "wasm/text/parser.mly"
            ( {min = nat32 _1 (ati 1); max = Some (nat32 _2 (ati 2))} )
# 1202 "wasm/text/parser.ml"
               : 'limits))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 240 "wasm/text/parser.mly"
                       ( _3 )
# 1209 "wasm/text/parser.ml"
               : 'type_use))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 246 "wasm/text/parser.mly"
        ( _1 @@ at () )
# 1216 "wasm/text/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 247 "wasm/text/parser.mly"
        ( _1 @@ at () )
# 1223 "wasm/text/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 248 "wasm/text/parser.mly"
          ( _1 @@ at () )
# 1230 "wasm/text/parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 251 "wasm/text/parser.mly"
        ( let at = at () in fun c lookup -> nat32 _1 at @@ at )
# 1237 "wasm/text/parser.ml"
               : 'var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 252 "wasm/text/parser.mly"
        ( let at = at () in fun c lookup -> lookup c (_1 @@ at) @@ at )
# 1244 "wasm/text/parser.ml"
               : 'var))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "wasm/text/parser.mly"
                ( fun c lookup -> [] )
# 1250 "wasm/text/parser.ml"
               : 'var_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_list) in
    Obj.repr(
# 256 "wasm/text/parser.mly"
                 ( fun c lookup -> _1 c lookup :: _2 c lookup )
# 1258 "wasm/text/parser.ml"
               : 'var_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 259 "wasm/text/parser.mly"
                ( fun c anon bind -> anon c )
# 1264 "wasm/text/parser.ml"
               : 'bind_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_var) in
    Obj.repr(
# 260 "wasm/text/parser.mly"
             ( fun c anon bind -> bind c _1 )
# 1271 "wasm/text/parser.ml"
               : 'bind_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 263 "wasm/text/parser.mly"
        ( _1 @@ at () )
# 1278 "wasm/text/parser.ml"
               : 'bind_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "wasm/text/parser.mly"
    ( fun c xs ->
      List.iter (fun x -> error x.at "mismatching label") xs;
      anon_label c )
# 1286 "wasm/text/parser.ml"
               : 'labeling_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_var) in
    Obj.repr(
# 271 "wasm/text/parser.mly"
    ( fun c xs ->
      List.iter
        (fun x -> if x.it <> _1.it then error x.at "mismatching label") xs;
      bind_label c _1 )
# 1296 "wasm/text/parser.ml"
               : 'labeling_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 277 "wasm/text/parser.mly"
                          ( [] )
# 1302 "wasm/text/parser.ml"
               : 'labeling_end_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_var) in
    Obj.repr(
# 278 "wasm/text/parser.mly"
             ( [_1] )
# 1309 "wasm/text/parser.ml"
               : 'labeling_end_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 281 "wasm/text/parser.mly"
                ( 0l )
# 1315 "wasm/text/parser.ml"
               : 'offset_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 282 "wasm/text/parser.mly"
                  ( nat32 _1 (at ()) )
# 1322 "wasm/text/parser.ml"
               : 'offset_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 285 "wasm/text/parser.mly"
                ( None )
# 1328 "wasm/text/parser.ml"
               : 'align_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 287 "wasm/text/parser.mly"
    ( let n = nat _1 (at ()) in
      if not (Lib.Int.is_power_of_two n) then
        error (at ()) "alignment must be a power of two";
      Some (Lib.Int.log2 n) )
# 1338 "wasm/text/parser.ml"
               : 'align_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plain_instr) in
    Obj.repr(
# 296 "wasm/text/parser.mly"
                ( let at = at () in fun c -> [_1 c @@ at] )
# 1345 "wasm/text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr) in
    Obj.repr(
# 297 "wasm/text/parser.mly"
               ( fun c -> let e, es = _1 c in e :: es )
# 1352 "wasm/text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block_instr) in
    Obj.repr(
# 298 "wasm/text/parser.mly"
                ( let at = at () in fun c -> [_1 c @@ at] )
# 1359 "wasm/text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 299 "wasm/text/parser.mly"
         ( _1 )
# 1366 "wasm/text/parser.ml"
               : 'instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 302 "wasm/text/parser.mly"
                ( fun c -> unreachable )
# 1372 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "wasm/text/parser.mly"
        ( fun c -> nop )
# 1378 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 304 "wasm/text/parser.mly"
           ( fun c -> br (_2 c label) )
# 1385 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 305 "wasm/text/parser.mly"
              ( fun c -> br_if (_2 c label) )
# 1392 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_list) in
    Obj.repr(
# 307 "wasm/text/parser.mly"
    ( fun c -> let xs, x = Lib.List.split_last (_2 c label :: _3 c label) in
      br_table xs x )
# 1401 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 309 "wasm/text/parser.mly"
           ( fun c -> return )
# 1407 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 310 "wasm/text/parser.mly"
             ( fun c -> call (_2 c func) )
# 1414 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 311 "wasm/text/parser.mly"
         ( fun c -> drop )
# 1420 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 312 "wasm/text/parser.mly"
           ( fun c -> select )
# 1426 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 313 "wasm/text/parser.mly"
                  ( fun c -> get_local (_2 c local) )
# 1433 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 314 "wasm/text/parser.mly"
                  ( fun c -> set_local (_2 c local) )
# 1440 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 315 "wasm/text/parser.mly"
                  ( fun c -> tee_local (_2 c local) )
# 1447 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 316 "wasm/text/parser.mly"
                   ( fun c -> get_global (_2 c global) )
# 1454 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 317 "wasm/text/parser.mly"
                   ( fun c -> set_global (_2 c global) )
# 1461 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int option -> Memory.offset -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'offset_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'align_opt) in
    Obj.repr(
# 318 "wasm/text/parser.mly"
                              ( fun c -> _1 _3 _2 )
# 1470 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int option -> Memory.offset -> Ast.instr') in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'offset_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'align_opt) in
    Obj.repr(
# 319 "wasm/text/parser.mly"
                               ( fun c -> _1 _3 _2 )
# 1479 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "wasm/text/parser.mly"
                   ( fun c -> current_memory )
# 1485 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    Obj.repr(
# 321 "wasm/text/parser.mly"
                ( fun c -> grow_memory )
# 1491 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Source.phrase -> Ast.instr' * Values.value) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 322 "wasm/text/parser.mly"
                  ( fun c -> fst (literal _1 _2) )
# 1499 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 323 "wasm/text/parser.mly"
         ( fun c -> _1 )
# 1506 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 324 "wasm/text/parser.mly"
            ( fun c -> _1 )
# 1513 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 325 "wasm/text/parser.mly"
          ( fun c -> _1 )
# 1520 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 326 "wasm/text/parser.mly"
           ( fun c -> _1 )
# 1527 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.instr') in
    Obj.repr(
# 327 "wasm/text/parser.mly"
            ( fun c -> _1 )
# 1534 "wasm/text/parser.ml"
               : 'plain_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_sig) in
    Obj.repr(
# 331 "wasm/text/parser.mly"
    ( let at1 = ati 1 in
      fun c -> let x, es = _2 c in call_indirect x @@ at1, es )
# 1542 "wasm/text/parser.ml"
               : 'call_instr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params) in
    Obj.repr(
# 336 "wasm/text/parser.mly"
    ( let at1 = ati 1 in
      fun c ->
      match _2 c with
      | FuncType ([], []), es -> _1 c type_, es
      | ft, es -> inline_type_explicit c (_1 c type_) ft at1, es )
# 1554 "wasm/text/parser.ml"
               : 'call_instr_sig))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params) in
    Obj.repr(
# 342 "wasm/text/parser.mly"
    ( let at1 = ati 1 in
      fun c -> let ft, es = _1 c in inline_type c ft at1, es )
# 1562 "wasm/text/parser.ml"
               : 'call_instr_sig))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_params) in
    Obj.repr(
# 347 "wasm/text/parser.mly"
    ( fun c ->
      let FuncType (ts1, ts2), es = _5 c in FuncType (_3 @ ts1, ts2), es )
# 1571 "wasm/text/parser.ml"
               : 'call_instr_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_results) in
    Obj.repr(
# 350 "wasm/text/parser.mly"
    ( fun c -> let ts, es = _1 c in FuncType ([], ts), es )
# 1578 "wasm/text/parser.ml"
               : 'call_instr_params))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_instr_results) in
    Obj.repr(
# 354 "wasm/text/parser.mly"
    ( fun c -> let ts, es = _5 c in _3 @ ts, es )
# 1586 "wasm/text/parser.ml"
               : 'call_instr_results))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr) in
    Obj.repr(
# 356 "wasm/text/parser.mly"
    ( fun c -> [], _1 c )
# 1593 "wasm/text/parser.ml"
               : 'call_instr_results))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'labeling_end_opt) in
    Obj.repr(
# 360 "wasm/text/parser.mly"
    ( fun c -> let c' = _2 c _5 in let ts, es = _3 c' in block ts es )
# 1602 "wasm/text/parser.ml"
               : 'block_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'labeling_end_opt) in
    Obj.repr(
# 362 "wasm/text/parser.mly"
    ( fun c -> let c' = _2 c _5 in let ts, es = _3 c' in loop ts es )
# 1611 "wasm/text/parser.ml"
               : 'block_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'labeling_end_opt) in
    Obj.repr(
# 364 "wasm/text/parser.mly"
    ( fun c -> let c' = _2 c _5 in let ts, es = _3 c' in if_ ts es [] )
# 1620 "wasm/text/parser.ml"
               : 'block_instr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'labeling_end_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'instr_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'labeling_end_opt) in
    Obj.repr(
# 366 "wasm/text/parser.mly"
    ( fun c -> let c' = _2 c (_5 @ _8) in
      let ts, es1 = _3 c' in if_ ts es1 (_6 c') )
# 1632 "wasm/text/parser.ml"
               : 'block_instr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Wasm_types.value_type) in
    Obj.repr(
# 370 "wasm/text/parser.mly"
                                ( [_3] )
# 1639 "wasm/text/parser.ml"
               : 'block_sig))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block_sig) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 374 "wasm/text/parser.mly"
    ( fun c -> _1, _2 c )
# 1647 "wasm/text/parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 375 "wasm/text/parser.mly"
               ( fun c -> [], _1 c )
# 1654 "wasm/text/parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr1) in
    Obj.repr(
# 379 "wasm/text/parser.mly"
    ( let at = at () in fun c -> let es, e' = _2 c in es @ [e' @@ at] )
# 1661 "wasm/text/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'plain_instr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 382 "wasm/text/parser.mly"
                          ( fun c -> _2 c, _1 c )
# 1669 "wasm/text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_sig) in
    Obj.repr(
# 384 "wasm/text/parser.mly"
    ( fun c -> let x, es = _2 c in es, call_indirect x )
# 1676 "wasm/text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 386 "wasm/text/parser.mly"
    ( fun c -> let c' = _2 c [] in let ts, es = _3 c' in [], block ts es )
# 1684 "wasm/text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 388 "wasm/text/parser.mly"
    ( fun c -> let c' = _2 c [] in let ts, es = _3 c' in [], loop ts es )
# 1692 "wasm/text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'labeling_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'if_block) in
    Obj.repr(
# 390 "wasm/text/parser.mly"
    ( fun c -> let c' = _2 c [] in
      let ts, (es, es1, es2) = _3 c c' in es, if_ ts es1 es2 )
# 1701 "wasm/text/parser.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_params) in
    Obj.repr(
# 395 "wasm/text/parser.mly"
    ( let at1 = ati 1 in
      fun c ->
      match _2 c with
      | FuncType ([], []), es -> _1 c type_, es
      | ft, es -> inline_type_explicit c (_1 c type_) ft at1, es )
# 1713 "wasm/text/parser.ml"
               : 'call_expr_sig))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_params) in
    Obj.repr(
# 401 "wasm/text/parser.mly"
    ( let at1 = ati 1 in
      fun c -> let ft, es = _1 c in inline_type c ft at1, es )
# 1721 "wasm/text/parser.ml"
               : 'call_expr_sig))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_params) in
    Obj.repr(
# 406 "wasm/text/parser.mly"
    ( fun c ->
      let FuncType (ts1, ts2), es = _5 c in FuncType (_3 @ ts1, ts2), es )
# 1730 "wasm/text/parser.ml"
               : 'call_expr_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_results) in
    Obj.repr(
# 409 "wasm/text/parser.mly"
    ( fun c -> let ts, es = _1 c in FuncType ([], ts), es )
# 1737 "wasm/text/parser.ml"
               : 'call_expr_params))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'call_expr_results) in
    Obj.repr(
# 413 "wasm/text/parser.mly"
    ( fun c -> let ts, es = _5 c in _3 @ ts, es )
# 1745 "wasm/text/parser.ml"
               : 'call_expr_results))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 415 "wasm/text/parser.mly"
    ( fun c -> [], _1 c )
# 1752 "wasm/text/parser.ml"
               : 'call_expr_results))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block_sig) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'if_block) in
    Obj.repr(
# 419 "wasm/text/parser.mly"
                       ( fun c c' -> let ts, ess = _2 c c' in _1 @ ts, ess )
# 1760 "wasm/text/parser.ml"
               : 'if_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_) in
    Obj.repr(
# 420 "wasm/text/parser.mly"
        ( fun c c' -> [], _1 c c' )
# 1767 "wasm/text/parser.ml"
               : 'if_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'if_) in
    Obj.repr(
# 424 "wasm/text/parser.mly"
    ( fun c c' -> let es = _1 c in let es0, es1, es2 = _2 c c' in
      es @ es0, es1, es2 )
# 1776 "wasm/text/parser.ml"
               : 'if_))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'instr_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'instr_list) in
    Obj.repr(
# 427 "wasm/text/parser.mly"
    ( fun c c' -> [], _3 c', _7 c' )
# 1784 "wasm/text/parser.ml"
               : 'if_))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'instr_list) in
    Obj.repr(
# 429 "wasm/text/parser.mly"
    ( fun c c' -> [], _3 c', [] )
# 1791 "wasm/text/parser.ml"
               : 'if_))
; (fun __caml_parser_env ->
    Obj.repr(
# 432 "wasm/text/parser.mly"
                ( fun c -> [] )
# 1797 "wasm/text/parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 433 "wasm/text/parser.mly"
                     ( fun c -> _1 c @ _2 c )
# 1805 "wasm/text/parser.ml"
               : 'instr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 436 "wasm/text/parser.mly"
                ( fun c -> [] )
# 1811 "wasm/text/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 437 "wasm/text/parser.mly"
                   ( fun c -> _1 c @ _2 c )
# 1819 "wasm/text/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 440 "wasm/text/parser.mly"
               ( let at = at () in fun c -> _1 c @@ at )
# 1826 "wasm/text/parser.ml"
               : 'const_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'func_fields) in
    Obj.repr(
# 447 "wasm/text/parser.mly"
    ( let at = at () in
      fun c -> let x = _3 c anon_func bind_func @@ at in fun () -> _4 c x at )
# 1835 "wasm/text/parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_body) in
    Obj.repr(
# 452 "wasm/text/parser.mly"
    ( fun c x at ->
      let t = inline_type_explicit c (_1 c type_) (fst _2) at in
      [{(snd _2 (enter_func c)) with ftype = t} @@ at], [], [] )
# 1845 "wasm/text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_body) in
    Obj.repr(
# 456 "wasm/text/parser.mly"
    ( fun c x at ->
      let t = inline_type c (fst _1) at in
      [{(snd _1 (enter_func c)) with ftype = t} @@ at], [], [] )
# 1854 "wasm/text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import) in
    Obj.repr(
# 460 "wasm/text/parser.mly"
    ( fun c x at ->
      let t = inline_type_explicit c (_2 c type_) _3 at in
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = FuncImport t @@ at } @@ at ], [] )
# 1867 "wasm/text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import) in
    Obj.repr(
# 466 "wasm/text/parser.mly"
    ( fun c x at ->
      let t = inline_type c _2 at in
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = FuncImport t @@ at } @@ at ], [] )
# 1879 "wasm/text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields) in
    Obj.repr(
# 472 "wasm/text/parser.mly"
    ( fun c x at ->
      let fns, ims, exs = _2 c x at in fns, ims, _1 (FuncExport x) c :: exs )
# 1888 "wasm/text/parser.ml"
               : 'func_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import_result) in
    Obj.repr(
# 476 "wasm/text/parser.mly"
                              ( _1 )
# 1895 "wasm/text/parser.ml"
               : 'func_fields_import))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import) in
    Obj.repr(
# 478 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = _5 in FuncType (_3 @ ins, out) )
# 1903 "wasm/text/parser.ml"
               : 'func_fields_import))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Wasm_types.value_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import) in
    Obj.repr(
# 480 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = _6 in FuncType (_4 :: ins, out) )
# 1912 "wasm/text/parser.ml"
               : 'func_fields_import))
; (fun __caml_parser_env ->
    Obj.repr(
# 483 "wasm/text/parser.mly"
                ( FuncType ([], []) )
# 1918 "wasm/text/parser.ml"
               : 'func_fields_import_result))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_import_result) in
    Obj.repr(
# 485 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = _5 in FuncType (ins, _3 @ out) )
# 1926 "wasm/text/parser.ml"
               : 'func_fields_import_result))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_result_body) in
    Obj.repr(
# 488 "wasm/text/parser.mly"
                     ( _1 )
# 1933 "wasm/text/parser.ml"
               : 'func_fields_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_body) in
    Obj.repr(
# 490 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = fst _5 in
      FuncType (_3 @ ins, out),
      fun c -> ignore (anon_locals c _3); snd _5 c )
# 1943 "wasm/text/parser.ml"
               : 'func_fields_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Wasm_types.value_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'func_fields_body) in
    Obj.repr(
# 494 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = fst _6 in
      FuncType (_4 :: ins, out),
      fun c -> ignore (bind_local c _3); snd _6 c )
# 1954 "wasm/text/parser.ml"
               : 'func_fields_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_body) in
    Obj.repr(
# 499 "wasm/text/parser.mly"
              ( FuncType ([], []), _1 )
# 1961 "wasm/text/parser.ml"
               : 'func_result_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_result_body) in
    Obj.repr(
# 501 "wasm/text/parser.mly"
    ( let FuncType (ins, out) = fst _5 in
      FuncType (ins, _3 @ out), snd _5 )
# 1970 "wasm/text/parser.ml"
               : 'func_result_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'instr_list) in
    Obj.repr(
# 506 "wasm/text/parser.mly"
    ( fun c -> let c' = anon_label c in
      {ftype = -1l @@ at(); locals = []; body = _1 c'} )
# 1978 "wasm/text/parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'value_type_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'func_body) in
    Obj.repr(
# 509 "wasm/text/parser.mly"
    ( fun c -> ignore (anon_locals c _3); let f = _5 c in
      {f with locals = _3 @ f.locals} )
# 1987 "wasm/text/parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Wasm_types.value_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'func_body) in
    Obj.repr(
# 512 "wasm/text/parser.mly"
    ( fun c -> ignore (bind_local c _3); let f = _6 c in
      {f with locals = _4 :: f.locals} )
# 1997 "wasm/text/parser.ml"
               : 'func_body))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'const_expr) in
    Obj.repr(
# 519 "wasm/text/parser.mly"
                                ( _3 )
# 2004 "wasm/text/parser.ml"
               : 'offset))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 520 "wasm/text/parser.mly"
         ( let at = at () in fun c -> _1 c @@ at )
# 2011 "wasm/text/parser.ml"
               : 'offset))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'var_list) in
    Obj.repr(
# 524 "wasm/text/parser.mly"
    ( let at = at () in
      fun c -> {index = _3 c table; offset = _4 c; init = _5 c func} @@ at )
# 2021 "wasm/text/parser.ml"
               : 'elem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'var_list) in
    Obj.repr(
# 527 "wasm/text/parser.mly"
    ( let at = at () in
      fun c -> {index = 0l @@ at; offset = _3 c; init = _4 c func} @@ at )
# 2030 "wasm/text/parser.ml"
               : 'elem))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'table_fields) in
    Obj.repr(
# 532 "wasm/text/parser.mly"
    ( let at = at () in
      fun c -> let x = _3 c anon_table bind_table @@ at in
      fun () -> _4 c x at )
# 2040 "wasm/text/parser.ml"
               : 'table))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'table_sig) in
    Obj.repr(
# 538 "wasm/text/parser.mly"
    ( fun c x at -> [{ttype = _1} @@ at], [], [], [] )
# 2047 "wasm/text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'table_sig) in
    Obj.repr(
# 540 "wasm/text/parser.mly"
    ( fun c x at ->
      [], [],
      [{ module_name = fst _1; item_name = snd _1;
        idesc = TableImport _2 @@ at } @@ at], [] )
# 2058 "wasm/text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'table_fields) in
    Obj.repr(
# 545 "wasm/text/parser.mly"
    ( fun c x at -> let tabs, elems, ims, exs = _2 c x at in
      tabs, elems, ims, _1 (TableExport x) c :: exs )
# 2067 "wasm/text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'elem_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'var_list) in
    Obj.repr(
# 548 "wasm/text/parser.mly"
    ( fun c x at ->
      let init = _4 c func in let size = Int32.of_int (List.length init) in
      [{ttype = TableType ({min = size; max = Some size}, _1)} @@ at],
      [{index = x; offset = [i32_const (0l @@ at) @@ at] @@ at; init} @@ at],
      [], [] )
# 2079 "wasm/text/parser.ml"
               : 'table_fields))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 556 "wasm/text/parser.mly"
    ( let at = at () in
      fun c -> {index = _3 c memory; offset = _4 c; init = _5} @@ at )
# 2089 "wasm/text/parser.ml"
               : 'data))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'offset) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 559 "wasm/text/parser.mly"
    ( let at = at () in
      fun c -> {index = 0l @@ at; offset = _3 c; init = _4} @@ at )
# 2098 "wasm/text/parser.ml"
               : 'data))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'memory_fields) in
    Obj.repr(
# 564 "wasm/text/parser.mly"
    ( let at = at () in
      fun c -> let x = _3 c anon_memory bind_memory @@ at in
      fun () -> _4 c x at )
# 2108 "wasm/text/parser.ml"
               : 'memory))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'memory_sig) in
    Obj.repr(
# 570 "wasm/text/parser.mly"
    ( fun c x at -> [{mtype = _1} @@ at], [], [], [] )
# 2115 "wasm/text/parser.ml"
               : 'memory_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'memory_sig) in
    Obj.repr(
# 572 "wasm/text/parser.mly"
    ( fun c x at ->
      [], [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = MemoryImport _2 @@ at } @@ at], [] )
# 2126 "wasm/text/parser.ml"
               : 'memory_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'memory_fields) in
    Obj.repr(
# 577 "wasm/text/parser.mly"
    ( fun c x at -> let mems, data, ims, exs = _2 c x at in
      mems, data, ims, _1 (MemoryExport x) c :: exs )
# 2135 "wasm/text/parser.ml"
               : 'memory_fields))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 580 "wasm/text/parser.mly"
    ( fun c x at ->
      let size = Int32.(div (add (of_int (String.length _3)) 65535l) 65536l) in
      [{mtype = MemoryType {min = size; max = Some size}} @@ at],
      [{index = x;
        offset = [i32_const (0l @@ at) @@ at] @@ at; init = _3} @@ at],
      [], [] )
# 2147 "wasm/text/parser.ml"
               : 'memory_fields))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'global_fields) in
    Obj.repr(
# 589 "wasm/text/parser.mly"
    ( let at = at () in
      fun c -> let x = _3 c anon_global bind_global @@ at in
      fun () -> _4 c x at )
# 2157 "wasm/text/parser.ml"
               : 'global))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'const_expr) in
    Obj.repr(
# 595 "wasm/text/parser.mly"
    ( fun c x at -> [{gtype = _1; value = _2 c} @@ at], [], [] )
# 2165 "wasm/text/parser.ml"
               : 'global_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_type) in
    Obj.repr(
# 597 "wasm/text/parser.mly"
    ( fun c x at ->
      [],
      [{ module_name = fst _1; item_name = snd _1;
         idesc = GlobalImport _2 @@ at } @@ at], [] )
# 2176 "wasm/text/parser.ml"
               : 'global_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_fields) in
    Obj.repr(
# 602 "wasm/text/parser.mly"
    ( fun c x at -> let globs, ims, exs = _2 c x at in
      globs, ims, _1 (GlobalExport x) c :: exs )
# 2185 "wasm/text/parser.ml"
               : 'global_fields))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'type_use) in
    Obj.repr(
# 610 "wasm/text/parser.mly"
    ( fun c -> ignore (_3 c anon_func bind_func);
      fun () -> FuncImport (_4 c type_) )
# 2194 "wasm/text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'func_sig) in
    Obj.repr(
# 613 "wasm/text/parser.mly"
    ( let at4 = ati 4 in
      fun c -> ignore (_3 c anon_func bind_func);
      fun () -> FuncImport (inline_type c _4 at4) )
# 2204 "wasm/text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'table_sig) in
    Obj.repr(
# 617 "wasm/text/parser.mly"
    ( fun c -> ignore (_3 c anon_table bind_table);
      fun () -> TableImport _4 )
# 2213 "wasm/text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'memory_sig) in
    Obj.repr(
# 620 "wasm/text/parser.mly"
    ( fun c -> ignore (_3 c anon_memory bind_memory);
      fun () -> MemoryImport _4 )
# 2222 "wasm/text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'global_type) in
    Obj.repr(
# 623 "wasm/text/parser.mly"
    ( fun c -> ignore (_3 c anon_global bind_global);
      fun () -> GlobalImport _4 )
# 2231 "wasm/text/parser.ml"
               : 'import_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'import_desc) in
    Obj.repr(
# 628 "wasm/text/parser.mly"
    ( let at = at () and at5 = ati 5 in
      fun c -> let df = _5 c in
      fun () -> {module_name = _3; item_name = _4; idesc = df () @@ at5} @@ at )
# 2242 "wasm/text/parser.ml"
               : 'import))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    Obj.repr(
# 633 "wasm/text/parser.mly"
                               ( _3, _4 )
# 2250 "wasm/text/parser.ml"
               : 'inline_import))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 636 "wasm/text/parser.mly"
                       ( fun c -> FuncExport (_3 c func) )
# 2257 "wasm/text/parser.ml"
               : 'export_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 637 "wasm/text/parser.mly"
                        ( fun c -> TableExport (_3 c table) )
# 2264 "wasm/text/parser.ml"
               : 'export_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 638 "wasm/text/parser.mly"
                         ( fun c -> MemoryExport (_3 c memory) )
# 2271 "wasm/text/parser.ml"
               : 'export_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 639 "wasm/text/parser.mly"
                         ( fun c -> GlobalExport (_3 c global) )
# 2278 "wasm/text/parser.ml"
               : 'export_desc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'export_desc) in
    Obj.repr(
# 643 "wasm/text/parser.mly"
    ( let at = at () and at4 = ati 4 in
      fun c -> {name = _3; edesc = _4 c @@ at4} @@ at )
# 2287 "wasm/text/parser.ml"
               : 'export))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    Obj.repr(
# 648 "wasm/text/parser.mly"
    ( let at = at () in fun d c -> {name = _3; edesc = d @@ at} @@ at )
# 2294 "wasm/text/parser.ml"
               : 'inline_export))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_type) in
    Obj.repr(
# 654 "wasm/text/parser.mly"
              ( _1 @@ at () )
# 2301 "wasm/text/parser.ml"
               : 'type_))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_) in
    Obj.repr(
# 658 "wasm/text/parser.mly"
    ( fun c -> anon_type c _3 )
# 2308 "wasm/text/parser.ml"
               : 'type_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'type_) in
    Obj.repr(
# 660 "wasm/text/parser.mly"
    ( fun c -> bind_type c _3 _4 )
# 2316 "wasm/text/parser.ml"
               : 'type_def))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    Obj.repr(
# 664 "wasm/text/parser.mly"
    ( fun c -> _3 c func )
# 2323 "wasm/text/parser.ml"
               : 'start))
; (fun __caml_parser_env ->
    Obj.repr(
# 668 "wasm/text/parser.mly"
    ( fun (c : context) () -> {empty_module with types = c.types.list} )
# 2329 "wasm/text/parser.ml"
               : 'module_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields1) in
    Obj.repr(
# 669 "wasm/text/parser.mly"
                   ( _1 )
# 2336 "wasm/text/parser.ml"
               : 'module_fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'type_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 673 "wasm/text/parser.mly"
    ( fun c -> ignore (_1 c); _2 c )
# 2344 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 675 "wasm/text/parser.mly"
    ( fun c -> let gf = _1 c in let mf = _2 c in
      fun () -> let globs, ims, exs = gf () in let m = mf () in
      if globs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after global definition";
      { m with globals = globs @ m.globals;
        imports = ims @ m.imports; exports = exs @ m.exports } )
# 2357 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'table) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 682 "wasm/text/parser.mly"
    ( fun c -> let tf = _1 c in let mf = _2 c in
      fun () -> let tabs, elems, ims, exs = tf () in let m = mf () in
      if tabs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after table definition";
      { m with tables = tabs @ m.tables; elems = elems @ m.elems;
        imports = ims @ m.imports; exports = exs @ m.exports } )
# 2370 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'memory) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 689 "wasm/text/parser.mly"
    ( fun c -> let mmf = _1 c in let mf = _2 c in
      fun () -> let mems, data, ims, exs = mmf () in let m = mf () in
      if mems <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after memory definition";
      { m with memories = mems @ m.memories; data = data @ m.data;
        imports = ims @ m.imports; exports = exs @ m.exports } )
# 2383 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 696 "wasm/text/parser.mly"
    ( fun c -> let ff = _1 c in let mf = _2 c in
      fun () -> let funcs, ims, exs = ff () in let m = mf () in
      if funcs <> [] && m.imports <> [] then
        error (List.hd m.imports).at "import after function definition";
      { m with funcs = funcs @ m.funcs;
        imports = ims @ m.imports; exports = exs @ m.exports } )
# 2396 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elem) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 703 "wasm/text/parser.mly"
    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in
      {m with elems = _1 c :: m.elems} )
# 2406 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'data) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 707 "wasm/text/parser.mly"
    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in
      {m with data = _1 c :: m.data} )
# 2416 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'start) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 711 "wasm/text/parser.mly"
    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in let x = _1 c in
      match m.start with
      | Some _ -> error x.at "multiple start sections"
      | None -> {m with start = Some x} )
# 2428 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'import) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 717 "wasm/text/parser.mly"
    ( fun c -> let imf = _1 c in let mf = _2 c in
      fun () -> let im = imf () in let m = mf () in
      {m with imports = im :: m.imports} )
# 2438 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'export) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 721 "wasm/text/parser.mly"
    ( fun c -> let mf = _2 c in
      fun () -> let m = mf () in
      {m with exports = _1 c :: m.exports} )
# 2448 "wasm/text/parser.ml"
               : 'module_fields1))
; (fun __caml_parser_env ->
    Obj.repr(
# 726 "wasm/text/parser.mly"
                ( None )
# 2454 "wasm/text/parser.ml"
               : 'module_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 727 "wasm/text/parser.mly"
        ( Some (_1 @@ at ()) )
# 2461 "wasm/text/parser.ml"
               : 'module_var_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'module_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_fields) in
    Obj.repr(
# 731 "wasm/text/parser.mly"
    ( _3, Textual (_4 (empty_context ()) () @@ at ()) @@ at () )
# 2469 "wasm/text/parser.ml"
               : 'module_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields) in
    Obj.repr(
# 734 "wasm/text/parser.mly"
                  ( Textual (_1 (empty_context ()) () @@ at ()) @@ at () )
# 2476 "wasm/text/parser.ml"
               : 'inline_module))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_fields1) in
    Obj.repr(
# 737 "wasm/text/parser.mly"
                   ( Textual (_1 (empty_context ()) () @@ at ()) @@ at () )
# 2483 "wasm/text/parser.ml"
               : 'inline_module1))
; (fun __caml_parser_env ->
    Obj.repr(
# 743 "wasm/text/parser.mly"
                ( None )
# 2489 "wasm/text/parser.ml"
               : 'script_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 744 "wasm/text/parser.mly"
        ( Some (_1 @@ at ()) )
# 2496 "wasm/text/parser.ml"
               : 'script_var_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'module_) in
    Obj.repr(
# 747 "wasm/text/parser.mly"
            ( _1 )
# 2503 "wasm/text/parser.ml"
               : 'script_module))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'module_var_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 749 "wasm/text/parser.mly"
    ( _3, Encoded ("binary", _5) @@ at() )
# 2511 "wasm/text/parser.ml"
               : 'script_module))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'module_var_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'string_list) in
    Obj.repr(
# 751 "wasm/text/parser.mly"
    ( _3, Quoted ("quote", _5) @@ at() )
# 2519 "wasm/text/parser.ml"
               : 'script_module))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'module_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'const_list) in
    Obj.repr(
# 755 "wasm/text/parser.mly"
    ( Invoke (_3, _4, _5) @@ at () )
# 2528 "wasm/text/parser.ml"
               : 'action))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'module_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    Obj.repr(
# 757 "wasm/text/parser.mly"
    ( Get (_3, _4) @@ at() )
# 2536 "wasm/text/parser.ml"
               : 'action))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_module) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 761 "wasm/text/parser.mly"
    ( AssertMalformed (snd _3, _4) @@ at () )
# 2544 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_module) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 763 "wasm/text/parser.mly"
    ( AssertInvalid (snd _3, _4) @@ at () )
# 2552 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_module) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 765 "wasm/text/parser.mly"
    ( AssertUnlinkable (snd _3, _4) @@ at () )
# 2560 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_module) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 767 "wasm/text/parser.mly"
    ( AssertUninstantiable (snd _3, _4) @@ at () )
# 2568 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'action) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'const_list) in
    Obj.repr(
# 768 "wasm/text/parser.mly"
                                              ( AssertReturn (_3, _4) @@ at () )
# 2576 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'action) in
    Obj.repr(
# 769 "wasm/text/parser.mly"
                                                 ( AssertReturnCanonicalNaN _3 @@ at () )
# 2583 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'action) in
    Obj.repr(
# 770 "wasm/text/parser.mly"
                                                  ( AssertReturnArithmeticNaN _3 @@ at () )
# 2590 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'action) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 771 "wasm/text/parser.mly"
                                        ( AssertTrap (_3, _4) @@ at () )
# 2598 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'action) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 772 "wasm/text/parser.mly"
                                              ( AssertExhaustion (_3, _4) @@ at () )
# 2606 "wasm/text/parser.ml"
               : 'assertion))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'action) in
    Obj.repr(
# 775 "wasm/text/parser.mly"
           ( Action _1 @@ at () )
# 2613 "wasm/text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assertion) in
    Obj.repr(
# 776 "wasm/text/parser.mly"
              ( Assertion _1 @@ at () )
# 2620 "wasm/text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'script_module) in
    Obj.repr(
# 777 "wasm/text/parser.mly"
                  ( Module (fst _1, snd _1) @@ at () )
# 2627 "wasm/text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'name) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'module_var_opt) in
    Obj.repr(
# 778 "wasm/text/parser.mly"
                                           ( Register (_3, _4) @@ at () )
# 2635 "wasm/text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'meta) in
    Obj.repr(
# 779 "wasm/text/parser.mly"
         ( Meta _1 @@ at () )
# 2642 "wasm/text/parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    Obj.repr(
# 782 "wasm/text/parser.mly"
                ( [] )
# 2648 "wasm/text/parser.ml"
               : 'cmd_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cmd_list) in
    Obj.repr(
# 783 "wasm/text/parser.mly"
                 ( _1 :: _2 )
# 2656 "wasm/text/parser.ml"
               : 'cmd_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cmd_list) in
    Obj.repr(
# 786 "wasm/text/parser.mly"
                                             ( Script (_3, _4) @@ at () )
# 2664 "wasm/text/parser.ml"
               : 'meta))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 787 "wasm/text/parser.mly"
                                          ( Input (_3, _4) @@ at () )
# 2672 "wasm/text/parser.ml"
               : 'meta))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'script_var_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 788 "wasm/text/parser.mly"
                                           ( Output (_3, Some _4) @@ at () )
# 2680 "wasm/text/parser.ml"
               : 'meta))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'script_var_opt) in
    Obj.repr(
# 789 "wasm/text/parser.mly"
                                    ( Output (_3, None) @@ at () )
# 2687 "wasm/text/parser.ml"
               : 'meta))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string Source.phrase -> Ast.instr' * Values.value) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'literal) in
    Obj.repr(
# 792 "wasm/text/parser.mly"
                            ( snd (literal _2 _3) @@ ati 3 )
# 2695 "wasm/text/parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    Obj.repr(
# 795 "wasm/text/parser.mly"
                ( [] )
# 2701 "wasm/text/parser.ml"
               : 'const_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'const) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'const_list) in
    Obj.repr(
# 796 "wasm/text/parser.mly"
                     ( _1 :: _2 )
# 2709 "wasm/text/parser.ml"
               : 'const_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cmd_list) in
    Obj.repr(
# 799 "wasm/text/parser.mly"
                 ( _1 )
# 2716 "wasm/text/parser.ml"
               : Script.script))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_module1) in
    Obj.repr(
# 800 "wasm/text/parser.mly"
                       ( [Module (None, _1) @@ at ()] )
# 2723 "wasm/text/parser.ml"
               : Script.script))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 803 "wasm/text/parser.mly"
        ( [_1] )
# 2730 "wasm/text/parser.ml"
               : Script.script))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'module_) in
    Obj.repr(
# 806 "wasm/text/parser.mly"
                ( _1 )
# 2737 "wasm/text/parser.ml"
               : Script.var option * Script.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inline_module) in
    Obj.repr(
# 807 "wasm/text/parser.mly"
                      ( None, _1 )
# 2744 "wasm/text/parser.ml"
               : Script.var option * Script.definition))
(* Entry script *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry script1 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry module1 *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let script (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Script.script)
let script1 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Script.script)
let module1 (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Script.var option * Script.definition)
;;
